import json
import sys
import codecs
import re

from s2tconsts import COLORCODES, IIconPack

APP_VERSION = '0.1alpha-20201017'

sys.stdout.reconfigure(encoding='utf-8')

# This script may seem pretty simple, incomplete and ... but in time we had, it really helped us to design nice
# pdf outputs with the use of Stimulsoft Design.

# trying to convert simple C# stimul code to simple inline php code
# supporting of:
# Split
# Split(a)[b].Substring(c, d)
# Contains(a)
# IIF(obj.var.Contains(a), b, c)
def convert2php(code):
    if code != None:
        # Some of most used scripts in stimul(basic ones):
        # 1. datasource.Value.Split('val0')[val1]
        #    datasource.Value.Split('val0')[val1].Split('val2')[val3]
        #    datasource.Value.Split('val0')[val1].Substring(val2, val3)
        # 2. IIF(datasource.Value.Contains("val0"), "val1", "val2")
        #    IIF(datasource.Value.Contains("val0"), false, true)
        #    IIF(datasource.Value.Contains("val0")||datasource.Value.Contains("val1"), "val2", "val3")
        # 3. datasource.Array[val0]
        # 4. datasource.Value
        #
        # and # ${pure php code}
        return re.sub('\\{([\\w\\d]+)\\.([\\w\\d]+)\\}', '{$\\1[\'\\2\']}',
            re.sub('\\{([\\w\\d]+)\\.([\\w\\d]+)\\[(\\d+)\\]\\}', '{$\\1[\'\\2\'][\\3]}',
            re.sub('\\{([\\w\\d]+)\\.([\\w\\d]+)\\.Split\\(\'([^\']+)\'\\)\\[(\\d+)\\]\\.Substring\\( *(\\d+) *, *(\\d+) *\\)\\}', '" . substr(explode(\'\\3\', $\\1[\'\\2\'])[\\4], \\5, \\6) . "',
            re.sub('\\{IIF\\(([\\w\\d]+)\\.([\\w\\d]+)\\.Contains\\("([^"]+)"\\) *, *([^,]+), *([^\\)]+)\\)\\}', '" . ($\\1[\'\\2\'] == \'\\3\' ? \\4 : \\5) . "',
            re.sub('\\{IIF\\(([\\w\\d]+)\\.([\\w\\d]+)\\.Contains\\(\\\\"([^\\\\]+)\\\\"\\) *, *([^,]+), *([^\\)]+)\\)\\}', '" . ($\\1[\'\\2\'] == \'\\3\' ? \\4 : \\5) . "',
            re.sub('\\{IIF\\(([\\w\\d]+)\\.([\\w\\d]+)\\.Contains\\(\\\\"([^\\\\]+)\\\\"\\) *, *\\\\"([^\\\\]+)\\\\" *, *\\\\"([^\\\\]+)\\\\"\\)\\}', '" . ($\\1[\'\\2\'] == \'\\3\' ? \'\\4\' : \'\\5\') . "',
            re.sub('\\{([\\w\\d]+)\\.([\\w\\d]+)\\.Split\\(\'([^\']+)\'\\)\\[(\\d+)\\]\\.Split\\(\'([^\']+)\'\\)\\[(\\d+)\\]\\}', '" . explode(\'\\5\', explode(\'\\3\', $\\1[\'\\2\'])[\\4])[\\6] . "',
            re.sub('\\$\\{([^\\}]+)\\}', '" . (\\1) . "',
            re.sub('\\{([\\w\\d]+)\\.([\\w\\d]+)\\.Split\\(\'([^\']+)\'\\)\\[(\\d+)\\]\\}', '" . explode(\'\\3\', $\\1[\'\\2\'])[\\4] . "', code
        ))))))))).replace('\\"', '"')

    return ''

print('<?php\n// Stimulsoft JSON2TCPDF v%s' % (APP_VERSION,))
if len(sys.argv) < 2:
    print('// Usage: %s <input-json>' % (sys.argv[0],))
    exit()

stijson = json.loads(open(sys.argv[1], 'rt', encoding='utf8').read())
pdf_unit = {'Inches':'in', 'Milimeters':'mm', 'Centimeters':'cm', 'Points':'pt'}
halign = {'Center':'C', 'Justify':'J', 'Left':'L', 'Right':'R'}
lastFont = {'name':'', 'style':'', 'size':''}
lastTextColor = ''
lastFillColor = ''
defaults = { # in case we don't have these, we use defaults
  'ReportUnit':'in', # in=Inches, mm=Milimeters, cm=Centimeters, pt=Points
  'Orientation':'P', # P=Portrait, L=Landscape
  'PaperSize':'Letter', # Letter, A4, A5, A3, ...
  'ReportName':'Report',
  'ReportAuthor':('StiJSON2TCPDF v%s by Ehsan Varasteh, ehsan.ecc@gmail.com' % (APP_VERSION,)),
  'ReportDescription':'---'
  }

print('''/**
 * This code generated by stijson2tcpdf.py
 * StiJSON2TCPDF v%s by Ehsan Varasteh, ehsan.ecc@gmail.com
 */

// Include the main TCPDF library (search for installation path).
if(file_exists('tcpdf'))
  include('tcpdf/tcpdf.php');
else
  include('../tcpdf/tcpdf.php');
if(file_exists('document_data.php'))  
  include('document_data.php');
else
  include('../document_data.php');

// create new PDF document
$pdf = new TCPDF('%s', '%s', '%s', true, 'UTF-8', false);

// set document information
$pdf->SetCreator('StiJSON2TCPDF');
$pdf->SetTitle('%s'); // Report Name
$pdf->SetAuthor('%s'); // Report Author
$pdf->SetSubject('%s'); // Report Description
$pdf->SetKeywords((defined('DOC_KEYWORDS') ? DOC_KEYWORDS : 'Report, Stimulsoft, TCPDF, PDF'));

// set default monospaced font
$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

// set margins
$pdf->SetMargins(%s, %s, %s);
//$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
//$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

$pdf->setPrintHeader(false);
$pdf->setPrintFooter(false);

// set auto page breaks
$pdf->SetAutoPageBreak(TRUE, %s);

// set image scale factor
$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

$barcodestyle = array(
    'position' => '',
    'align' => 'C',
    'stretch' => false,
    'fitwidth' => true,
    'cellfitalign' => '',
    'border' => false,
    'hpadding' => 'auto',
    'vpadding' => 'auto',
    'fgcolor' => array(0,0,0),
    'bgcolor' => false,
    'text' => true,
    'font' => 'helvetica',
    'fontsize' => 8,
    'stretchtext' => 4
);

$IIconPack = [
  'CheckColor'=>'%s',
  'DeleteColor'=>'%s'
];

// --------------------------------------------------------- START

$pdf->AddPage();''' % 
    (APP_VERSION,
     stijson['Pages']['0']['Orientation'][0] if 'Orientation' in stijson['Pages']['0'] else defaults['Orientation'], 
     pdf_unit[stijson['ReportUnit']] if 'ReportUnit' in stijson else defaults['ReportUnit'],
     stijson['Pages']['0']['PaperSize'] if 'PaperSize' in stijson['Pages']['0'] else defaults['PaperSize'],
     stijson['ReportName'] if 'ReportName' in stijson else defaults['ReportName'],
     stijson['ReportAuthor'] if 'ReportAuthor' in stijson else defaults['ReportAuthor'],
     stijson['ReportDescription'] if 'ReportDescription' in stijson else defaults['ReportDescription'],
     stijson['Pages']['0']['Margins']['Left'], stijson['Pages']['0']['Margins']['Top'],
     stijson['Pages']['0']['Margins']['Right'], stijson['Pages']['0']['Margins']['Bottom'],
     IIconPack['CheckColor'], IIconPack['DeleteColor']))

sticomponents = stijson['Pages']['0']['Components']['0']['Components']
for components in sticomponents:
    if sticomponents[components]['Ident'] == 'StiText':
        b = sticomponents[components]['Border'].split(';')
        BorderColor = COLORCODES[b[7].split(':')[1].upper()] if b[7].split(':')[1].upper() in COLORCODES else b[7].split(':')[1]
        Border = [(z.strip()[0] if len(z.strip()) > 1 else '') for z in b[0].split(',')]
        Extra = ''
        Text = ''
        if 'Text' in sticomponents[components]:
            Text = sticomponents[components]['Text']['Value'].replace("\"", "\\\"").replace("\r", "")
            # print('// ' + Text)
            if re.match('.*{([^}]+)}.*', Text) != None:
                Text = convert2php(Text)

        r = sticomponents[components]['ClientRectangle'].split(',')
        rect = {'Width':float(r[2]), 'Height':float(r[3]), 'X':(float(r[0])+0.35), 'Y':(float(r[1])+0.35)}
        FillColor = (COLORCODES[sticomponents[components]['Brush'].split(':')[1].upper()] if sticomponents[components]['Brush'].split(':')[1].upper() in COLORCODES else sticomponents[components]['Brush'].split(':')[1]) if sticomponents[components]['Brush'] != 'empty' else ''
        TextColor = COLORCODES[sticomponents[components]['TextBrush'].split(':')[1].upper()] if sticomponents[components]['TextBrush'].split(':')[1].upper() in COLORCODES else sticomponents[components]['TextBrush'].split(':')[1]
        doFill = 0
        Font = {'name':sticomponents[components]['Font'].split(';')[0].replace(' ', ''), 
                'style':sticomponents[components]['Font'].split(';')[2][0] 
                  if len(sticomponents[components]['Font'].split(';')[2]) > 0 
                  else '', 
                'size':sticomponents[components]['Font'].split(';')[1]
               }
        if sticomponents[components]['Brush'].split(':')[0] == 'glass':
            NewColor = '%d,%d,%d' % (int(FillColor.split(',')[0])+20,int(FillColor.split(',')[1])+20,int(FillColor.split(',')[2])+20)
            # Extra = "$pdf->Rect(%.02f, %.02f, %.02f, %.02f, 'F', ['L'=>0, 'T'=>0, 'R'=>0, 'B'=>0], [%s]);\n" % (rect['X'], rect['Y'], rect['Width'], float(rect['Height'])/2, NewColor)
            # Extra += "$pdf->Rect(%.02f, %.02f, %.02f, %.02f, 'F', ['L'=>0, 'T'=>0, 'R'=>0, 'B'=>0], [%s]);" % (rect['X'], float(rect['Y']) + (float(rect['Height'])/2), rect['Width'], float(rect['Height'])/2.0, FillColor)
            Extra = "\n$pdf->SetFillColor(%s); $pdf->RoundedRect(%.02f, %.02f, %.02f, %.02f, %.02f, '0001', 'F');\n" % (NewColor, rect['X'], rect['Y'], rect['Width'], float(rect['Height'])/2.0, float(rect['Height'])/2.0)
            Extra += "$pdf->SetFillColor(%s); $pdf->RoundedRect(%.02f, %.02f, %.02f, %.02f, %.02f, '0100', 'F');" % (FillColor, rect['X'], float(rect['Y']) + (float(rect['Height'])/2.0), rect['Width'], float(rect['Height'])/2.0, float(rect['Height'])/2.0)
            doFill = 0
        
        print(
          '''/* Ident: StiText ||| Name: '%s' */\n$txt = "%s";%s%s%s%s%s\n'''
          '''$pdf->MultiCell(%.02f, %.02f, $txt, '%s', '%s', %s, %s, %.02f, %.02f, true, 0, false, false, %.02f);''' % (
            sticomponents[components]['Name'],
            Text, Extra,
            '''$pdf->SetFillColor(%s);''' % (FillColor,) if FillColor.replace(' ', '') != lastFillColor.replace(' ', '') else '', "$pdf->Rect(%.02f, %.02f, %.02f, %.02f, 'F');" % (rect['X'], rect['Y'], rect['Width'], rect['Height']) if (sticomponents[components]['Brush'].split(':')[0] != 'glass' and sticomponents[components]['Brush'] != 'empty') else '',
            '''$pdf->SetTextColor(%s);''' % (TextColor,) if TextColor.replace(' ', '') != lastTextColor.replace(' ', '') else '',
            # BorderColor,
            '''\n$pdf->SetFont('%s', '%s', %s);''' % (Font['name'], Font['style'], Font['size']) if Font != lastFont else '',
            rect['Width'], rect['Height'], ''.join(Border), halign[sticomponents[components]['HorAlignment']] if 'HorAlignment' in sticomponents[components] else 'C', doFill, 1, rect['X'], rect['Y'], rect['Height']+0.1
          )
        )
        lastFont = Font
        lastTextColor = TextColor
        lastFillColor = FillColor
        # width, height, text, border, align='J', fill=0, ln??=1, x, y, reseth=true, stretch=0, ishtml=false, autopadding=true, maxh=0

    elif sticomponents[components]['Ident'] == 'StiImage':
        imgCode = ""
        r = sticomponents[components]['ClientRectangle'].split(',')
        rect = {'Width':float(r[2]), 'Height':float(r[3]), 'X':(float(r[0])+0.35), 'Y':(float(r[1])+0.35)}
        # Image($file, $x='', $y='', $w=0, $h=0, $type='', $link='', $align='', $resize=false, $dpi=300, $palign='', $ismask=false, $imgmask=false, $border=0, $fitbox=false, $hidden=false, $fitonpage=false)
        if 'ImageBytes' in sticomponents[components] and len(sticomponents[components]['ImageBytes']) > 100:
            imgCode = '''$pdf->Image('@' . base64_decode('%s'), %.02f, %.02f, %.02f, %.02f, 'PNG', '', '', true, 150, '', false, false, 0, false, false, false);''' % (sticomponents[components]['ImageBytes'], rect['X'], rect['Y'], rect['Width'], rect['Height'])
        if 'DataColumn' in sticomponents[components] and len(sticomponents[components]['DataColumn']) > 1:
            imgCode = '''$pdf->Image('@' . base64_decode(%s), %.02f, %.02f, %.02f, %.02f, 'JPG', '', '', false, 300, '', false, false, 0, true, false, false);''' % (re.sub('([\\w\\d]+)\\.([\\w\\d]+)', '$\\1[\'\\2\']', sticomponents[components]['DataColumn']), rect['X'], rect['Y'], rect['Width'], rect['Height'])
        print('''/* Ident: StiImage ||| Name: '%s' */\n%s''' % (sticomponents[components]['Name'], imgCode))

    elif sticomponents[components]['Ident'] == 'StiBarCode':
        r = sticomponents[components]['ClientRectangle'].split(',')
        rect = {'Width':float(r[2]), 'Height':float(r[3]), 'X':(float(r[0])+0.35), 'Y':(float(r[1])+0.35)}
        print('/* Ident: StiBarCode ||| Name: \'%s\' ||| BarCodeType: %s */' % (sticomponents[components]['Name'], sticomponents[components]['BarCodeType']['Ident']))
        if sticomponents[components]['BarCodeType']['Ident'] == 'StiCode128cBarCodeType':
            print('''$pdf->write1DBarcode(%s, 'C128C', %.02f, %.02f, %.02f, %.02f, 0.4, $barcodestyle, 'N');''' % ("'9876543210'", rect['X'], rect['Y'], rect['Width'], rect['Height']))

    elif sticomponents[components]['Ident'] == 'StiCheckBox':
        r = sticomponents[components]['ClientRectangle'].split(',')
        rect = {'Width':float(r[2]), 'Height':float(r[3]), 'X':(float(r[0])+0.35), 'Y':(float(r[1])+0.35)}
        print('/* Ident: StiCheckBox ||| Name: \'%s\' ||| CheckStyleForTrue: %s ||| CheckStyleForFalse: %s */' % 
          (sticomponents[components]['Name'], sticomponents[components]['CheckStyleForTrue'] 
            if 'CheckStyleForTrue' in sticomponents[components] else 'None', 
            sticomponents[components]['CheckStyleForFalse'] 
            if 'CheckStyleForFalse' in sticomponents[components] else 'None'
          )
        )
        print('''$bVal = "%s"; $pdf->Image("@" . (boolval($bVal) ? base64_decode($IIconPack[\'CheckColor\']) : base64_decode($IIconPack[\'DeleteColor\'])), %.02f, %.02f, %.02f, %.02f, 'PNG', '', '', false, 300, '', false, false, 0, true, false, false);''' % (convert2php(sticomponents[components]['Checked']['Value']), rect['X'], rect['Y'], rect['Width'], rect['Height']))
    
    else: # unknown, probably not defined yet!
        print('/* Ident: %s ||| Name: %s */\n' % (sticomponents[components]['Ident'], sticomponents[components]['Name']))

print('''// Close and output PDF document
$ofilename = 'stijson2tcpdf';
if(file_exists("$ofilename.pdf"))
  $ofilename = sprintf("%s_%d", $ofilename, count(glob("$ofilename*.pdf")+1));
$pdf->Output("$ofilename.pdf", 'I');
die();
''')